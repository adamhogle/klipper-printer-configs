[respond]

[gcode_macro PRINT_START]
description: used at the start of a print
# Parameter "BED": desired temperature of bed
# Parameter "EXTRUDER": desired temperature of extruder
# Parameter "NOZZLE": expected size of nozzle
# Parameter "MATERIAL": type of material (PLA/PETG/ASA)
gcode:
    #{action_raise_error(params)}
    # Verify we got our parameters
    {action_raise_error("missing 'bed' parameter") if params.BED is not defined else action_respond_info("Desired bed temp: " + params.BED)}
    {action_raise_error("missing 'extruder' parameter") if params.EXTRUDER is not defined else action_respond_info("Desired extruder temp: " + params.EXTRUDER)}
    {action_raise_error("missing 'nozzle' parameter") if params.NOZZLE is not defined else action_respond_info("Expected nozzle size: " + params.NOZZLE)}
    {action_raise_error("missing 'material' parameter") if params.MATERIAL is not defined else action_respond_info("Print material: " + params.MATERIAL)}

    # Verify this was sliced for our printer
    {action_raise_error("Nozzle mismatch") if printer.configfile.config.extruder["nozzle_diameter"]|float != params.NOZZLE|float}

    {% set needs_heat = (params.MATERIAL in ["ABS","ASA", "PC"]) %}

    RESPOND MSG="Clearing existing printer state"
    BED_MESH_CLEAR  ; Kill any mesh leveling still present
    M107            ; turn off all fans
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    SET_LED LED=extruder RED=1 GREEN=1 BLUE=1 WHITE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=extruder RED=1 GREEN=1 BLUE=1 WHITE=1 INDEX=2 TRANSMIT=0
    SET_LED LED=extruder RED=1 GREEN=1 BLUE=1 WHITE=1 INDEX=3
    
    RESPOND MSG="Turning on heaters to preheat"
    M140 S{params.BED|float}                ; start heating bed
    SET_FAN_SPEED FAN=bed_fans SPEED=1.0    ; Start warming up the chamber
    M104 S150                               ; tell the extruder to aim for 150-ish
    { action_respond_info("Homing (first pass)") }
    G90                                     ; abs position
    G28                                     ; Home everything

    RESPOND MSG="Warming up bed to target"
    TEMPERATURE_WAIT SENSOR="heater_bed" MINIMUM={params.BED|float} ; Wait for the bed to reach temp
    {% if needs_heat %}
      RESPOND MSG="Warming up chamber to target"
      TEMPERATURE_WAIT SENSOR="temperature_sensor enclosure_temp" MINIMUM=50  ; Wait for chamber to reach desired temp
      SET_FAN_SPEED FAN=bed_fans SPEED=1.0                                    ; Back off fans to hold temp
    {% else %}
      SET_FAN_SPEED FAN=bed_fans SPEED=0.0 ; No bed fans  
    {% endif %}

    RESPOND MSG="Homing (second pass)"
    QUAD_GANTRY_LEVEL   ; Level Gantry
    G28                 ; Home everything (Gantry twist could cause issues if we skip this)
    BED_MESH_CALIBRATE  ; Determine the taco of the bed

    RESPOND MSG="Warming up extruder"
    G21                             ; set units to millimeters; slicer expects this
    G90                             ; absolute positioning; slicer expects this
    G92 E0                          ; reset extruder position
    M83                             ; relative extruder position; slicer configured to use this
    G0 X0 Y0 Z5 F30000              ; move to front-left of bed
    M109 S{params.EXTRUDER|float}   ; warm up extruder to final temp
    G1 E5.0 F600
    G92 E0

    # (x)Slicer always overextrudes solid infill; Prusa sets this to 98% to correct for it
    #M221 S98

    # Offset between probe and switch
    SET_GCODE_OFFSET Z=0.425
    {% if params.MATERIAL == "PLA" %}
      SET_GCODE_OFFSET Z_ADJUST=-0.075 ; PLA needs more squish
    {% endif %}

    RESPOND MSG="PRINTING!"
    SET_LED LED=extruder RED=1 GREEN=0 BLUE=0 WHITE=0 INDEX=3


[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    SET_LED LED=extruder RED=0 GREEN=1 BLUE=0 WHITE=0 INDEX=3
    
    M400            ; wait for buffer to clear
    G92 E0          ; zero the extruder
    G1 E-5.0 F3000  ; retract filament
    
    TURN_OFF_HEATERS
    M106 S255       ; Max fan to cool hotend (limit drip)
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F30000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x} Y{th.axis_maximum.y - 2} F30000  ; park nozzle at rear-right
    
    BED_MESH_CLEAR

    # Cool the chamber so we can remove the part
    ;SET_FAN_SPEED FAN=bed_fans SPEED=1.0     ; Max fans to cool chamber 
    ;TEMPERATURE_WAIT SENSOR="heater_bed" MAXIMUM=50 ; Ensure the bed is below 50

    # Turn off all fans
    SET_FAN_SPEED FAN=bed_fans SPEED=0
    M107

    SET_LED LED=extruder RED=0 GREEN=0 BLUE=0 SYNC=0

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    SET_GCODE_OFFSET X=0 Y=0 Z=0


[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y + 20} F6000  ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


# Support PRUSA-style filament changes
[gcode_macro M600]
gcode:
    PAUSE                ; Pause

